name: terrarun

services:

  traefik:
    image: traefik:v2.8
    restart: always
    command: --providers.docker=true --providers.docker.exposedByDefault=false --providers.docker.constraints="Label(`traefik.project`, `${COMPOSE_PROJECT_NAME}`)" --providers.file.filename=/etc/traefik/dynamic_conf/conf.yml --api.insecure=true --entrypoints.web.address=:80 --entrypoints.websecure.address=:443 --accesslog=true
    hostname: $DOMAIN
    ports:
      # Open traefik http [80] and https [443] ports.
      - '80:80'
      - '443:443'
      - '8080:8080'
    networks:
      - web
      - default
    volumes:
      - ./ssl:/ssl:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/dynamic_conf/conf.yml:ro

  ui:
    restart: unless-stopped
    build:
      context: ./ui
      dockerfile: Dockerfile
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.project=${COMPOSE_PROJECT_NAME}"
      - "traefik.http.routers.terrarun-ui.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.terrarun-ui.entrypoints=websecure"
      - "traefik.http.routers.terrarun-ui.tls=true"
      - "traefik.http.services.terrarun-ui.loadbalancer.server.port=80"
      - "traefik.http.routers.terrarun-ui.service=terrarun-ui"

  api:
    restart: unless-stopped
    build: .
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.project=${COMPOSE_PROJECT_NAME}"
      - "traefik.http.routers.terrarun-api.rule=Host(`$DOMAIN`) && (PathPrefix(`/.well-known`) || PathPrefix(`/api`)) || PathPrefix(`/auth`)"
      - "traefik.http.routers.terrarun-api.entrypoints=websecure"
      - "traefik.http.routers.terrarun-api.tls=true"
      - "traefik.http.services.terrarun-api.loadbalancer.server.port=5000"
      - "traefik.http.routers.terrarun-api.service=terrarun-api"
    environment:
      DATABASE_URL: $DATABASE_URL
      AWS_ENDPOINT: $AWS_ENDPOINT
      AWS_BUCKET_NAME: $AWS_BUCKET_NAME
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_REGION: $AWS_REGION
      AGENT_IMAGE_FILENAME: $AGENT_IMAGE_FILENAME
      AGENT_PRESIGN_ENCRYPTION_KEY: $AGENT_PRESIGN_ENCRYPTION_KEY
    depends_on:
      - db
      - minio
    links:
      - db
      - minio

    entrypoint: ["python", "-u", "terrarun.py"]

  worker:
    restart: unless-stopped
    image: "${COMPOSE_PROJECT_NAME}-api:latest"
    networks:
      - web
    depends_on:
      - api
      - db
      - minio
    links:
      - db
      - minio
      - tfsec-task

    entrypoint: ["python", "-u", "worker.py"]

  cron-tasks:
    restart: unless-stopped
    image: "${COMPOSE_PROJECT_NAME}-api:latest"
    networks:
      - web
    depends_on:
      - api
      - db
      - minio
    links:
      - db
      - minio
    entrypoint: ["python", "-u", "./cron_tasks.py"]

  db:
    image: mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: $MARIADB_ROOT_PASSWORD
      MARIADB_USER: $MARIADB_USER
      MARIADB_PASSWORD: $MARIADB_PASSWORD
      MARIADB_DATABASE: $MARIADB_DATABASE
    networks:
      - web
    volumes:
     - mysqldata:/var/lib/mysql

  minio:
    image: minio/minio
    expose:
     - 9000
     - 9001
    networks:
      - web
      - default
    environment:
      MINIO_ACCESS_KEY: $AWS_ACCESS_KEY_ID
      MINIO_SECRET_KEY: $AWS_SECRET_ACCESS_KEY
    command: server /data --console-address ":9001"

  createbucket:
    image: minio/mc
    depends_on:
      - minio
    networks:
      - web
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add jmonminio $AWS_ENDPOINT $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY;
      /usr/bin/mc mb jmonminio/$AWS_BUCKET_NAME;
      exit 0;
      "

  # Example custom agent
  agent:
    restart: unless-stopped
    image: hashicorp/tfc-agent:1.15.4
    networks:
      - web
    depends_on:
      - traefik
      - api
    environment:
      TFC_AGENT_TOKEN: $TFC_AGENT_TOKEN
      TFC_AGENT_ACCEPT: plan,apply
      TFC_ADDRESS: https://$DOMAIN
    links:
      - "traefik:$DOMAIN"

  # Example run task application
  tfsec-task:
    build: https://gitlab.dockstudios.co.uk/pub/terra/tfcloud-tfsec.git
    networks:
     - web

volumes:
  mysqldata:

networks:
  web: 
    name: "${COMPOSE_PROJECT_NAME}-web"
  default:
    name: "${COMPOSE_PROJECT_NAME}-default"
    driver: bridge
