"""Add base tables for environment, meta workspace and lifcycele

Revision ID: 41314cadd46f
Revises: 9aeeefaf9da5
Create Date: 2022-10-12 07:39:58.511326

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '41314cadd46f'
down_revision = '9aeeefaf9da5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lifecycle',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('organisation_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name='fk_lifecycle_organisation_id_organisation_id'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('environment',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('organisation_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name='fk_environment_organisation_id_organisation_id'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('meta_workspace',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('organisation_id', sa.Integer(), nullable=False),
        sa.Column('lifecycle_id', sa.Integer(), nullable=False),
        sa.Column('allow_destroy_plan', sa.Boolean(), nullable=True),
        sa.Column('auto_apply', sa.Boolean(), nullable=True),
        sa.Column('execution_mode', sa.Enum('REMOTE', 'LOCAL', 'AGENT', name='workspaceexecutionmode'), nullable=True),
        sa.Column('file_triggers_enabled', sa.Boolean(), nullable=True),
        sa.Column('global_remote_state', sa.Boolean(), nullable=True),
        sa.Column('operations', sa.Boolean(), nullable=True),
        sa.Column('queue_all_runs', sa.Boolean(), nullable=True),
        sa.Column('speculative_enabled', sa.Boolean(), nullable=True),
        sa.Column('terraform_version', sa.String(), nullable=True),
        sa.Column('trigger_prefixes', sa.String(), nullable=True),
        sa.Column('trigger_patterns', sa.String(), nullable=True),
        sa.Column('vcs_repo', sa.String(), nullable=True),
        sa.Column('vcs_repo_branch', sa.String(), nullable=True),
        sa.Column('vcs_repo_ingress_submodules', sa.Boolean(), nullable=True),
        sa.Column('vcs_repo_identifier', sa.String(), nullable=True),
        sa.Column('vcs_repo_tags_regex', sa.String(), nullable=True),
        sa.Column('working_directory', sa.String(), nullable=True),
        sa.Column('assessments_enabled', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['lifecycle_id'], ['lifecycle.id'], name='fk_meta_workspace_lifecycle_id_lifecycle_id'),
        sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name='fk_meta_workspace_organisation_id_organisation_id'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lifecycle_environment',
        sa.Column('lifecycle_id', sa.Integer(), nullable=False),
        sa.Column('environment_id', sa.Integer(), nullable=False),
        sa.Column('order', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['environment_id'], ['environment.id'], ),
        sa.ForeignKeyConstraint(['lifecycle_id'], ['lifecycle.id'], ),
        sa.PrimaryKeyConstraint('lifecycle_id', 'environment_id')
    )
    with op.batch_alter_table('organisation') as organisation_batch:
        organisation_batch.add_column(sa.Column('default_lifecycle_id', sa.Integer(), nullable=True))
        organisation_batch.create_foreign_key('fk_organisation_default_lifecycle_id_lifecycle_id', 'lifecycle', ['default_lifecycle_id'], ['id'])
    with op.batch_alter_table('workspace') as workspace_batch:
        workspace_batch.add_column(sa.Column('description', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('enabled', sa.Boolean(), nullable=False))
        workspace_batch.add_column(sa.Column('meta_workspace_id', sa.Integer(), nullable=False))
        workspace_batch.add_column(sa.Column('environment_id', sa.Integer(), nullable=False))
        workspace_batch.add_column(sa.Column('allow_destroy_plan', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('execution_mode', sa.Enum('REMOTE', 'LOCAL', 'AGENT', name='workspaceexecutionmode'), nullable=True))
        workspace_batch.add_column(sa.Column('file_triggers_enabled', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('global_remote_state', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('operations', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('queue_all_runs', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('speculative_enabled', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('terraform_version', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('trigger_prefixes', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('trigger_patterns', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('vcs_repo', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('vcs_repo_branch', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('vcs_repo_ingress_submodules', sa.Boolean(), nullable=True))
        workspace_batch.add_column(sa.Column('vcs_repo_identifier', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('vcs_repo_tags_regex', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('working_directory', sa.String(), nullable=True))
        workspace_batch.add_column(sa.Column('assessments_enabled', sa.Boolean(), nullable=True))
        workspace_batch.create_foreign_key('workspace_meta_workspace_id_meta_workspace_id', 'meta_workspace', ['meta_workspace_id'], ['id'])
        workspace_batch.create_foreign_key('fk_workspace_environment_id_environment_id', 'environment', ['environment_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_workspace_environment_id_environment_id', 'workspace', type_='foreignkey')
    op.drop_constraint('workspace_meta_workspace_id_meta_workspace_id', 'workspace', type_='foreignkey')
    op.drop_column('workspace', 'assessments_enabled')
    op.drop_column('workspace', 'working_directory')
    op.drop_column('workspace', 'vcs_repo_tags_regex')
    op.drop_column('workspace', 'vcs_repo_identifier')
    op.drop_column('workspace', 'vcs_repo_ingress_submodules')
    op.drop_column('workspace', 'vcs_repo_branch')
    op.drop_column('workspace', 'vcs_repo')
    op.drop_column('workspace', 'trigger_patterns')
    op.drop_column('workspace', 'trigger_prefixes')
    op.drop_column('workspace', 'terraform_version')
    op.drop_column('workspace', 'speculative_enabled')
    op.drop_column('workspace', 'queue_all_runs')
    op.drop_column('workspace', 'operations')
    op.drop_column('workspace', 'global_remote_state')
    op.drop_column('workspace', 'file_triggers_enabled')
    op.drop_column('workspace', 'execution_mode')
    op.drop_column('workspace', 'allow_destroy_plan')
    op.drop_column('workspace', 'environment_id')
    op.drop_column('workspace', 'meta_workspace_id')
    op.drop_column('workspace', 'enabled')
    op.drop_column('workspace', 'description')
    op.drop_constraint('fk_organisation_default_lifecycle_id_lifecycle_id', 'organisation', type_='foreignkey')
    op.drop_column('organisation', 'default_lifecycle_id')
    op.drop_table('lifecycle_environment')
    op.drop_table('meta_workspace')
    op.drop_table('environment')
    op.drop_table('lifecycle')
    # ### end Alembic commands ###
